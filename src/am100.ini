# ---------------------------------------------------------------------
# Configuration parameters for virtual Alphamicro AM-100 based computer
# system.  Like a real S-100 system, not all possible combinations of 
# parameters will work! Pay particular attention to ensure the ports
# defined are what the system you intend to boot expects, and that the 
# various 'reset' parameters are consistent with each other...
#
# Numbers in this file are decimal by default, but may be expressed in
# octal (leading 0) or hex (leading 0x) per usual 'C' convention.
#
# Also note that all input is converted to lower case, so no filename
# with uppercase characters can be in the name of any file you want input
# or output.
#
# ---------------------------------------------------------------------

#/* ----------------------------------------------------------------- */
#/*                                                                   */
#/* This software is an emulator for the Alpha-Micro AM-100 computer. */
#/* It is copyright by Michael Noel and licensed for non-commercial   */
#/* hobbyist use under terms of the "Q public license", an open       */
#/* source certified license.  A copy of that license may be found    */
#/* here:       http://www.otterway.com/am100/license.html            */
#/*                                                                   */
#/* There exist known serious discrepancies between this software's   */
#/* internal functioning and that of a real AM-100, as well as        */
#/* between it and the WD-1600 manual describing the functionality of */
#/* a real AM-100, and even between it and the comments in the code   */
#/* describing what it is intended to do! Use it at your own risk!    */
#/*                                                                   */
#/* Reliability aside, it isn't the intent of the copyright holder to */
#/* use this software to compete with current or future Alpha-Micro   */
#/* products, and no such competing application of the software will  */
#/* be supported.                                                     */
#/*                                                                   */
#/* Alpha-Micro and other software that may be run on this emulator   */
#/* are not covered by the above copyright or license and must be     */
#/* legally obtained from an authorized source.                       */
#/*                                                                   */
#/* ----------------------------------------------------------------- */

#
# - pause statement sleeps for specified number of seconds before the
#   configuration processing continues.
#

pause	2

#
# - echo statement caused statements in this file to echo to stderr.
#     Note that echo is off by default (until you turn it on).
#

echo	off

# - am100 defines functions of a am100 dual card cpu. 
 
#   clkfrq is the number of times per second a 'clock' interrupt is to
#   be raised.  It should match the CLKFRQ in the SYSTEM.INI

#   svcc is a flag that tell the 'hardware assist' feature whether SVCC
#   to be trapped start at 0 and work up (low) or start at 0x3f and work
#   down (high).  Probably the most important is svcc 0/3f which is
#   entry to the system disk driver.  amos50c.tgz and earlier used 0, but
#   this effectively precluded any other use of svcc.  amos50d.tgz and
#   above use 0x3f, which means svcc's up to ~ 0x30 can be used. but for
#   compatibility, the default is lo!!!

#   dsk is a number 0-3 of the disk to load the monitor from.  0 default.

#   mon is the name of the system monitor to load.  "" default, which
#   means use "system.mon".  Specifying something else is like booting 
#   with MONTST.  the monitor you ask for will be sought on the drive
#   selected with the dsk parameter above, and in [1,4].

#   ini is the name of the system ini file to use.  "" default, which 
#   means use whatever is in the loaded monitor (usually "system.ini").
#   Again, this is like MONTST.  Note that regardless of where the 
#   monitor (or disk driver) is loaded from (dsk parameter above) the
#   system boot will use dsk0:[1,4] to find the ini file you select.

#   dvr is the name of the system disk driver to use.  "" default, which
#   means use whatever is mongen'd into the loaded monitor.  Specifying
#   a driver here is like a dynamic MONGEN, except that it only applies
#   to the loaded monitor, nothing is changed on disk.  The driver you
#   ask for will be sought on the drive selected with the dsk parameter
#   above, and in [1,6]

#   It is not logical to define more than one am100, and doing so will
#   be flagged as an error.

#   Following configuration shows clkfrq entered in decimal, a special
#   (10 mb size, svcc=hi) configured disk drive dynamic MONGEN, and
#   use of the hi svcc option.  This is the appropriate configuration for
#   amos50d.tgz systems and above.

am100	clkfrq=60 \
	dvr="vd10hi.dvr" svcc=hi 

# - am300 defines functions of an AM-300 6 channel serial I/O card. 
 
#   port is the lowest of 5 port addresses that will be used to simulate
#   the serial interface.  The address should be divisible by 8, and 
#   match the port specified in the assembly of the interface driver used.
#   AM300.IDV as delivered from AlphaMicro is assembled with a value of 0xf8.

#   intlvl is the interrupt level, a number 1-8 that matches what is
#   specified in the assembly of the interface driver used.
#   AM300.IDV as delivered from AlphaMicro is assembled with a value of 3.

#   fnum1 is the alt key sequence used to select (make active, bring to front,
#   etc) the screen image associated with the first port.  1-9 are available 
#   (zero being reserved for the "front panel").

#   fnum2, fnum3, fnum4, fnum5, and fnum6 are similarly used to associate the
#   remaining 5 channels of the board with screen images.  Channels are not
#   'active' if they do not have a screen...

#   Following configuration shows the first 4 of the 6 channels defined for
#   the standard AM300.IDV assembly.

am300 port=0xf8 intlvl=3 \
      fnum1=1 fnum2=2 fnum3=3 fnum4=4

# - ps3 defines functions of a Processor Technology 3P+S I/O card. 

#   the ps3 interface is still supported but since AM300 emulation has
#   been added there is really no reason to use it...

#   port is the lower of two port addresses that will be used to simulate
#   the serial interface.  It should be an even address, and it should 
#   match the port specified on the SYSTEM.INI TRMDEF statement that uses
#   the simulated terminal, ie, TRMDEF ANYTERM,PS3=20,TELTYP,80,80,80  

#   The port may not be zero.  Port zero is the diagnostic LED.

#   fnum is the alt key sequence used to select (make active, bring to front,
#   etc) the screen image associated with the port.  1-9 are available (zero
#   being reserved for the "front panel").

#   Following configuration shows port entered in octal for a pair of ps3
#   interfaces with alt key selection 5 and 6.

#ps3	port=020 fnum=5
#ps3	port=024 fnum=6
	
# - telnet defines functions of a telnet terminal server which will be 
#   connected in parrellel to every am300 or ps3 port for which you 
#   defined an "fnum" - except for the first one!  So fnums 2-9 are
#   available as you see fit, but fnum = 1 is reserved (will usually be
#   assigned to JOB1.  Note that since this is in parrellel to the 
#   ALT-fnum access the local user has, he is able to oversee and interact
#   with the remote users.

#   the telnet terminal server is optional.  If you don't want it, 
#   comment it out or delete it from this file!
 
#   port is the internet port you will use to access the server.  Values
#   may be 1025-3276 but should not conflict with other well know ports.


#   Following configuration shows port entered in decimal as usual for 
#   internet ports...

#telnet	port=12345

# - am320 defines functions of an AM-320 line printer controller card. 
 
#   port is the lower of two port addresses that will be used to simulate
#   the interface.  It should be an even address, and it should 
#   match the port specified in the assembled printer driver DVR:LPR.DVR.
#   The driver source is LPR.MAC[10,2] which specifies port C2 (hex).

#   Note that if you desire lower case output you must modify and 
#   reassemble LPR.MAC[10,2] by commenting out the 5 lines above label
#   LPIG1 as noted in the source.  Be sure to move the assembled driver
#   back to [1,6] ! 

#   the port may not be zero.  Port zero is the diagnostic LED.

#   file is the name of a file, defaulting to the same directory as the 
#   emulator executable, that will get the printed output.  It is usually
#   most convenient to point it to a shared printer (cygwin) or print
#   server (linux). Piping is allowed (ie, "| lpr") but be sure the exec
#   time path is what you want - especially in windows note the paths
#   from a cygwin bash prompt and from a windows shortcut may be different!

#   the file name can be changed at run time with the ALT-M menu...

#   delay (optional) is the number of seconds after activity stops until
#   the print file is flushed. Default is 30 seconds. Min is 1, max is 530.

#   Some limitations here: if the print file is immediately reopened
#   after it's closed ('cause you started another print job at exactly
#   the wrong time) the host print spoolr may print garbage.  This is
#   much more likely with windows but can happen with linux as well.

#   Define as few or many of these cards (printers) as you like...

#   The first of the following configurations shows default port and file
#   pointing to the default (shared) printer on my ms windows xp (cygwin)
#   machine.  The second shows the file being piped to lpr on my linux box. 

#am320	port=0xC2 file='//lianli/mfc' delay=30
#am320	port=0xC6 file='| lpr' delay=30
	
# - am600 defines functions of an AM-600 mag tape controller card. 
 
#   port is the lower of two port addresses that will be used to simulate
#   the interface.  It should be an even address, and it should 
#   match the port specified in the assembled printer driver DVR:MTU.DVR.
#   The driver source is MTU.MAC[10,2] which specifies port A0 (hex).

#   the port may not be zero.  Port zero is the diagnostic LED.

#   mtlvl is the dma level assoicate with the board. This is optional and
#   unused by the emulator, however if specified it is checked to ensure
#   that it is >0 and < 16..
#   The driver source MTU.MAC[10,2] specifies mtlvl 13.

#   file is the name of a file, defaulting to the same directory as the 
#   emulator executable, that will be used to simulate the first drive
#   (drive 0) attached to the card.  It is optional and may be over riden
#   using the ALT-M mount dialog.  No means other than the mount dialog
#   are available to specify files associated with the other 7 drives.

#   Define as few or many of these cards as you like (but since you can
#   have up to 8 drives per card it probably makes no sense to define
#   more than one!) but the mount dialog will only process the first am600
#   card defined.

#   The following configurations shows default port and dma level but
#   does not specify any tape file; the mount dialog must be used before the
#   first call to the tape system. 

am600   port=0xA0 mtlvl=13

# - rom defines functions on a r/o memory card.

#   Port is the bank switch control port for the card. Pinit is a
#   value that is 'output' to the port as part of initialization.
#   Size is the total memory on the card in k (ie, 8=8k).  The 
#   total memory on the card is evenly divided into 8 banks.  
#   Base0 thru Base7 specify where in the am100 memory space each
#   of the 8 banks begins.  Since this is bank switched memory
#   these banks may overlap or duplicate each other.  Ensuring
#   the Hardware (this file) and the software (AMOS SYSTEM.INI)
#   are logical and consistent is your responsibility!  The 8 banks
#   are each controlled by one of the 8 bits that can be written to
#   the port, so for example writing 0x88 to the port would turn 
#   on bank0 and bank4 and turn off the other 6 banks.

#   memory 'chunkiness' is 256 bytes, so each bank must be a multiple
#   of 256 bytes.  Since there are 8 banks on a board this means size
#   must be a multiple of 2k.

#   image is the name of a file, in the same directory as the 
#   emulator executable, that will be loaded into the rom memory
#   board at initialization.  Loading of the rom image is just bank0,
#   bank1, bank2, ... and is completely independent of the address
#   ranges represented by those banks or their swap in status.

#   You can have as many as ROM cards as you want (though ports must
#   be unique). The port MAY be specified as zero, which is interpreted
#   to mean bank switching will not be used for this board.

#   Following configuration represents 1 8k rom card, with its 8 1k
#   banks sequentially addressed starting at 0xe000 (end of memory)
#   and initially turned on.  Very similar to a cromemco bytesaver II.
#   If this were a bytesaver each bank would be a 2708 eprom.

#rom	port=0x40 pinit=0xff \
#	size=8 \
#	base0=0xe000 base1=0xe400 base2=0xe800 base3=0xec00 \
#	base4=0xf000 base5=0xf400 base6=0xf800 base7=0xfc00 \
#	image='perlod.prg'

# - ram defines functions of an r/w memory card.

#   Ram is just like rom, except it is writeable and does not offer
#   the ability to load an initial image.  Other parameters and
#   comments under ROM apply.

#   Following configuration represents 2 128k ram cards, Very similar to
#   a pair of cromemco 128kz's.  They are arranged in 16k banks configured
#   to support an AMOS 16k monitor / 48k jobs system.  Initially the first
#   48k (banks 0, 1, 2 on the first board) is on, the rest off.

ram	port=0x43 pinit=0xe0 \
	size=128 \
	base0=0x0000 base1=0x4000 base2=0x8000 base3=0xc000 \
	base4=0x4000 base5=0x4000 base6=0x8000 base7=0xc000

ram	port=0x44 pinit=0x00 \
	size=128 \
	base0=0x8000 base1=0x4000 base2=0x8000 base3=0xc000 \
	base4=0xc000 base5=0x4000 base6=0x8000 base7=0xc000
